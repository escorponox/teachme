#!/usr/bin/env bash
echo "This is the git commit command."

# The command's name
echo -e 'git commit'

# the command's description
echo "The git commit command is used to submit staged changes to the git origin repository. Staged changes are the way git keeps related modifications in one snap shot. Git commit is used to tell git you are ready to submit the staged changes to the origin repository."

echo "------------"

# the command's syntax
echo "Syntax:"
echo "git commit [ --amend | -m <msg> ]"
echo -e "\t--amend: amend last commit. Useful if you forgot to add a file or to modify the comment. Never do this to an already public commit"
echo -e "\t-m <msg>: use the given <msg> as the commit message"
#   ...      etc

echo "------------"

# the command's usage examples
# example 1
echo "git commit"
echo "Git commit stores the contents of the index with a commit message. Git commit (with no flags) will attempt to open the systems default text editor by looking in \$EDITOR. If it doesn't find one, the commit will fail. The editor will open up and once a commit message is entered and the editor closed the commit will proceed. If no message is entered the commit fails and is cancelled."

# example 2
echo "git commit -am '<commit message>'"
echo "This example will automatically stage files (-a) that have been modified or deleted then adds the supplied <commit message> and completes the commit. Using the -m flag can lead to shorter commit messages which may not provide the required detail to make the message useful in the future. Use -m sparingly and provide meaningful commit messages."


exit 0
